<?xml version="1.0" encoding="utf-8"?>

<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd"
[
<!ENTITY foundation_installation SYSTEM "foundation/installation.xml">
<!ENTITY foundation_spring_annotation SYSTEM "foundation/spring/annotation.xml">
<!ENTITY foundation_spring_aop SYSTEM "foundation/spring/aop.xml">
<!ENTITY foundation_spring_spel SYSTEM "foundation/spring/spel.xml">
<!ENTITY foundation_spring_datasource SYSTEM "foundation/spring/datasource.xml">
<!ENTITY foundation_spring_ioc SYSTEM "foundation/spring/ioc.xml">
<!ENTITY foundation_spring_transaction SYSTEM "foundation/spring/transaction.xml">
<!ENTITY foundation_spring_javaconfig SYSTEM "foundation/spring/javaconfig.xml">
<!ENTITY foundation_springmvc_architecture SYSTEM "foundation/springmvc/architecture.xml">
<!ENTITY foundation_springmvc_configuration SYSTEM "foundation/springmvc/configuration.xml">
<!ENTITY foundation_springmvc_controller SYSTEM "foundation/springmvc/controller.xml">
<!ENTITY foundation_springmvc_view SYSTEM "foundation/springmvc/view.xml">
<!ENTITY foundation_springmvc_fileupload SYSTEM "foundation/springmvc/fileupload.xml">
<!ENTITY foundation_springmvc_internationalization SYSTEM "foundation/springmvc/internationalization.xml">
<!ENTITY foundation_springmvc_exceptionhandling SYSTEM "foundation/springmvc/exceptionhandling.xml">
<!ENTITY foundation_springmvc_springintegration SYSTEM "foundation/springmvc/springintegration.xml">
<!ENTITY foundation_springmvc_validation SYSTEM "foundation/springmvc/validation.xml">
<!ENTITY foundation_springmvc_conversion SYSTEM "foundation/springmvc/conversion.xml">
<!ENTITY foundation_springmvcextensions SYSTEM "foundation/springmvcextensions.xml">
<!ENTITY foundation_springmvcextensions_configuration SYSTEM "foundation/springmvcextensions/configuration.xml">
<!ENTITY foundation_springmvcextensions_taglibrary SYSTEM "foundation/springmvcextensions/taglibrary.xml">
<!ENTITY foundation_idgen_uuid SYSTEM "foundation/idgen/uuidgen.xml">
<!ENTITY foundation_idgen_sequenceid SYSTEM "foundation/idgen/sequenceidgen.xml">
<!ENTITY foundation_idgen_tableid SYSTEM "foundation/idgen/tableidgen.xml">
<!ENTITY foundation_idgen_idgenstrategy SYSTEM "foundation/idgen/idgenstrategy.xml">
<!ENTITY foundation_idgen_resources SYSTEM "foundation/idgen/resources.xml">
<!ENTITY foundation_logging_configuration SYSTEM "foundation/logging/configuration.xml">
<!ENTITY foundation_logging_logging SYSTEM "foundation/logging/logging.xml">
<!ENTITY foundation_logging_sqllogging SYSTEM "foundation/logging/sqllogging.xml">
<!ENTITY foundation_logging_resources SYSTEM "foundation/logging/resources.xml">
<!ENTITY foundation_messagesource SYSTEM "foundation/messagesource.xml">
<!ENTITY foundation_query_configuration SYSTEM "foundation/query/configuration.xml">
<!ENTITY foundation_query_mapping SYSTEM "foundation/query/mappingxml.xml">
<!ENTITY foundation_query_usecases SYSTEM "foundation/query/usecases.xml">
<!ENTITY foundation_query_resources SYSTEM "foundation/query/resources.xml">
<!ENTITY foundation_properties SYSTEM "foundation/properties.xml">
]
>

<!--
		Licensed to the Apache Software Foundation (ASF) under one or more
		contributor license agreements. See the NOTICE file distributed with
		this work for additional information regarding copyright ownership.
		The ASF licenses this file to you under the Apache License, Version
		2.0 (the "License"); you may not use this file except in compliance
		with the License. You may obtain a copy of the License at

		http://www.apache.org/licenses/LICENSE-2.0 Unless required by
		applicable law or agreed to in writing, software distributed under the
		License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
		CONDITIONS OF ANY KIND, either express or implied. See the License for
		the specific language governing permissions and limitations under the
		License.
-->
    
<book lang="en">
	<title>Anyframe Foundation Plugin</title>
	
	<bookinfo>
		<copyright>
			<year>2007-2010</year>
			<holder>Samsung SDS</holder>
		</copyright>
		<releaseinfo>Version 4.6.1</releaseinfo>

		<productname>Anyframe Foundation Plugin</productname>
		
		<authorgroup>
			<corpauthor></corpauthor>
		</authorgroup>
		
		<mediaobject>
			<imageobject>
				<imagedata fileref="../image/common/logo_pdf.jpg"/>
			</imageobject>
		</mediaobject>
		<legalnotice>
			<para>
				
				
			
			    The copyright of this document is the property of Samsung SDS.
			    Permission is granted to use this document for free only for the purpose of open source community activity. 
			    The copyright holder should be clearly stated in case this document is copied or distributed, 
			    and changed contents should be specified. 
			    Permission is not granted for the commercial use of the modification of the original document.  
			    Should there be parts considered to have errors in this document, 
			    please register the issue for which we will take proper action.

				
			</para>
		</legalnotice>
	</bookinfo>
 
	<part id="foundation_installation_part">
		<title>Installation</title>
		<partintro id="foundation_installation_partintro">
			<para>
				Foundation Plugin is the basic Plugin which is the basis of all Plugin manuals provided by Anyframe, 
				and is composed of 				sample code to guide how to use  <ulink url="http://www.springsource.org">Spring MVC, Spring</ulink>, 
				Query Service,etc. and reference libraries to use such open sources.
		
			
				
				
			</para>						
		</partintro>
		&foundation_installation;
	</part>
 	 
	<part id="foundation_spring_part">
		<title>Spring</title>
		<partintro id="foundation_spring_partintro">
			<para>
			Spring provides lightweight container which manages the life-cycle of object and minimize the dependence among objects.
			The following is the main characteristics of Spring Lightweight container.
				
			</para>
			<itemizedlist>
				<listitem>
					<para>POJO-based development support</para>
						<para>
							Without the need of adding container-dependent code to design output, POJO-based application can be developed.
							In other words, when developing lightweight container, 
							it is possible to prevent framework-induced dual process of basic design and detailed design
							or discrepancy between design model and implementation.
							
						</para>
				</listitem>
				<listitem>
					<para>Dependency Resolution Support</para>
					<para>
						This provides the method to manage the dependency among application composition modules. 
						This directly creates reference module in a specific module code 
						in order to prevent the situation that reference modules are tightly-coupled.
						Like most lightweight containers, this provides DI(Dependency Injection)support, and DL(Dependency Lookup) is also possible.
					
					</para>
				</listitem>
				<listitem>
					<para>Aspect Oriented Programming Support</para>
					<para>
						AOP is a component method which enables the reuse of common functions such as
						logging, authentication, authorization check, DB integration, transaction, locking, error handling, etc.
						which are widely used in the entire application but hard to develop in separate modules.
						In AOP, such common functions are named 'crosscutting concerns' and business functions provided by the relevant application
						are called 'core concerns'. In other words, instead of directly adding crosscutting concerns necessary for crosscutting concerns module,
						AOP enables crosscutting concerns code to run which are needed among core concerns module
						without the need of directly touching core concerns module code, through the process called 'weaving'.
						Through this process, AOP can effectively apply crosscutting concerns functions necessary without modifying
						the existing codes.
					
						
					</para>
				</listitem>
				<listitem>
					<para>Life-cycle management</para>
					<para>
						Lightweight container manages the life-cycle of defined module and performs the role of initializing/finalizing the
						relevant modules, thereby enables developers to develop focusing on business logic. 
						
					</para>
				</listitem>
				<listitem>
					<para> Easy to add new functions</para>
					<para>
						Through XML- or annotation-based setting, this enables the convenient addition of new functions based on container.
						
					</para>
				</listitem>
			</itemizedlist>
			<para>
				In the part, let's take a look at main functions provided by Spring Ligjhtweight container.
				In addition, you will also learn Spring Reomting method for comminicating services between client application and remote application.
				
			
			</para>	
		</partintro>
		&foundation_spring_ioc;
		&foundation_spring_annotation;
		&foundation_spring_javaconfig;
		&foundation_spring_aop;
		&foundation_spring_spel;
		&foundation_spring_datasource;
		&foundation_spring_transaction;					
	</part>
	
	<part id="foundation_springmvc_part">
		<title>Spring MVC</title>
		<partintro id="foundation_springmvc_partintro">
			<para>
				Spring MVC is a MVC(Model, View, Controller)pattern-based web framework.
				Spring MVC consists of Controller, Handler Mappings, ModelAndView, View Resolver, View, etc. and 
				uses DispatchServlet
				as a front controller which conveys all the request to controller.
				As the controller that handles request can implement using @Controller and @RequestMapping only
				even without implementing specific interface or inheriting special class, more vaious form can be developed.
				In addition, based on various new annotations and functions of  @PathVariable, @RequestBody, @ResponseBody which were introduced from 
				Spring 3.x,  RESTful web application can be developed.
				

	
			</para>
			<para>
				Spring MVC can use POJO which is not suject to any Framework API as an object to convey input form data.
				In addition, as Spring MVC is flexible in deciding view showing the data processed in the server,
				technical integration is possible not only with general JSP but also with Tiles, Velocity,etc.
				
			</para>
			<para>   Spirng MVC web framework has the following charateristics. 
				<itemizedlist>
					<listitem><para> Clear role split. 
					Each role of ontroller, validator, command object,form object, model object, DispatcherServlet, 
					handler mapping, view resolver,etc. is handled by objects specialized in the relevant role.
					</para></listitem>
					<listitem><para>Easy and simple setting of JavaBean and frameowrk in application.
					</para></listitem>
					<listitem><para>Withought extending business object using framework-subject API, reuse in command or form object is possible.
					</para></listitem>
					<listitem><para>Can customize data binding or validation for data bining and validation error check in the application level.
					</para></listitem>
					<listitem><para>Provides Spring tag for data binding or theme use.
					</para></listitem>
					<listitem><para>Provides form tag which enables easier usage of JSP input form.
					</para></listitem>
				</itemizedlist>
			</para>
		</partintro>
		&foundation_springmvc_architecture;
		&foundation_springmvc_configuration;
		&foundation_springmvc_controller;
		&foundation_springmvc_view;
		&foundation_springmvc_validation;
		&foundation_springmvc_conversion;
		&foundation_springmvc_fileupload;
		&foundation_springmvc_internationalization;
		&foundation_springmvc_exceptionhandling;
		&foundation_springmvc_springintegration;		
	</part>
	
	<part id="foundation_springmvcextensions_part">
		<title>Spring MVC Extensions</title>
		<partintro id="foundation_springmvcextensions_partintro">
			<para>
				Anyframe provides anyframe namespace and Custom tag library for developers to develop presentation layer more easily.
				Custom tag library includes Anyframe message tag, extended from Spring message tag for encoded Korean message of utf-8/euc-kr,
				and Page Navigator tag which can develop Page Navigation without jave code of JSP.				
			</para>
		</partintro>
		&foundation_springmvcextensions_configuration;
		&foundation_springmvcextensions_taglibrary;
	</part>	
	
	<part id="foundation_idgen">
		<title>Id Generation</title>
		<partintro id="foundation_idgen_partintro">
			<para>
				As one of the most frequently used functions in system development, this can be used to create unique ID.
				Usually, when receiving new ID to add new record to database or creating new file in the file system, 
				unique ID is needed for the guarantee of unique file name.
				There are three types of implementation in ID generation service and the the following is how to use each emplementation.
						
			</para>			
		</partintro>
		&foundation_idgen_uuid;
		&foundation_idgen_sequenceid;
		&foundation_idgen_tableid;
		&foundation_idgen_idgenstrategy;
		&foundation_idgen_resources;		
	</part>	
	
	<part id="foundation_logging_part">
		<title>Logging</title>
		<partintro id="foundation_logging_partintro">
			<para>
				The method that developers use to print a log is System.out.println().
				Despite the convenience, however, this method is not recommended for the following reasons.
			
		  	</para>
		
			<itemizedlist>
		    	<listitem>
		    		<para>
		    			As calling System.out.println is synchronized during disk I/O, system throughput decreases.
		    			
		    		</para>
		    	</listitem>
		
		    	<listitem>
		      		<para>
		      			Basically, stack trace result reamins in the console.
		      			However, tracking exceptiion through console during system operation is not recommended.
		      		
		      		</para>
				</listitem>
		
		    	<listitem>
		      		<para>
		      			In case of mapping of  ‘[&gt;null]’(in the case of NT) for System.out and system.errs or dev/null(in the case of Unix)
		      			in the O/S, exception log may not be printed.
		      			In addition, in the case of execution in NT service, console itself may not be seen.
		      			
		      		</para>
		    	</listitem>
		
		    	<listitem>
		      		<para>
		      			Even if console log is redirected as output file, file can be overwritten when J2EE App Server is restarted.
		      			
		     		</para>
		    	</listitem>
		
		    	<listitem>
		      		<para>
		      			It is not recommended to use System.out.println only when developing/testing 
		      			and deleting them before tranferring to operation, because the operatipon code and test code may not be same.
		      			
		      		</para>
				</listitem>
			</itemizedlist>
		
		  	<para>
		  		Therefore, mechanixm is needed to manage logging declaratively and minimize functino overhead during operation
		  		while making testing code and operation code consistent.
		  		For this function, Anyframe Framework provides how to leave a log using <ulink
		  		url="http://logging.apache.org/log4j/">Log4j </ulink>.
		  	
		  	</para>
		</partintro>
		&foundation_logging_configuration;
		&foundation_logging_logging;
		&foundation_logging_sqllogging;
		&foundation_logging_resources;		
	</part>	
	
 
	<part id="foundation_messagesource_part">
		<title>Message Source</title>
		<partintro id="foundation_messagesource_partintro">
			<para>
				For internationalization, it is needed to provide MessageSource and define this as bean.
				When using Korean, however,encoding handling was needed for leaving a log in Service or leaving as a message in the view.
				Anyframe provides ncodingResourceBundleMessageSource and enables the extraction of message through customized encoding.
				
		. 
			</para>			
		</partintro>
		&foundation_messagesource;
	</part>		
	
	<part id="foundation_query_part">
		<title>Query Service</title>
		<partintro id="foundation_query_partintro">
			<para>
			  	Query service enables DB data handling by adding query sql or object only.
			  	Query service provides various data access method by extrading data access perforance using JDBC(Java
			  	Database Connectivity) and reduces common errors which can occur when using JDBC.
			  	As Query service uses DataSource service internally,it must be distributed along with DataSource service.
			  	
		  	</para>
		  	
			<para>
				All test codes provided in Query service manual are excuted based on HSQL DB.
				(Exception:  For CallableStatement, based on Oracle 9i, 10g.)
				
			</para> 
		</partintro>
		&foundation_query_configuration;
		&foundation_query_mapping;
		&foundation_query_usecases;
		&foundation_query_resources;		
	</part>		
	
	<part id="foundation_properties_part">
		<title>Properties Service</title>
		<partintro id="foundation_properties_partintro">
			<para>
				Properties Service internally has a pair of key and value composed in external file or environment information
				and enables application to access the value of this specific key.
				This service enhances the flexibility of systm by managing relevant data externally when
				the information on system setting envirohment or frequent modificatin of information is needed.
				In the case of EJB component, internal functions to manage such information are provided, therefore 
				there is no need to use this funtion in the service.
				
						
			</para>
		</partintro>
		&foundation_properties;				
	</part>		
		
</book>