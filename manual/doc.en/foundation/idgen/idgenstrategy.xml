<chapter id="foundation_idgen_idgenstrategy">
	<title>How to use a Generation Strategy</title>

		<para>
			When using TableIdGeneration Service, generation strategy can be applied
			to create unique id.
			To use generation strategy, select one among the following ways.			
    	</para>

	    <itemizedlist>
    		<listitem>
        		<para>
        			<emphasis role="bold">Refer to strategy by dependency injection</emphasis>
        			<programlisting language="xml"><![CDATA[<bean name="idGenerationService"
    class="anyframe.core.idgen.impl.TableIdGenerationService"
    destroy-method="destroy">
    <property name="dataSource" ref="dataSource" />
    <property name="strategy" ref="mixPrefixProduct" />
    <config:configuration block-size="1" table="ids" key-table="PRODUCT" />
</bean>

<bean name="mixPrefixProduct" class="anyframe.core.idgen.impl.strategy.MixPrefix">
    <property name="prefix" value="PRODUCT-" />
    <property name="cipers" value="5" />
    <property name="fillChar" value="0" />
</bean>]]></programlisting>
				</para>
      		</listitem>

      		<listitem>
        		<para><emphasis role="bold">Use bean id directly when creating id. </emphasis></para>

        		<para>
        			<programlisting language="java">id = idGenerator.getNextStringId<emphasis
              		role="bold">("mixPrefix");</emphasis></programlisting>
              	</para>
      		</listitem>

      		<listitem>
        		<para><emphasis role="bold">Use strategy instance when creating id.</emphasis></para>

        		<para>
        			<programlisting language="java"><emphasis 
        			role="bold">MixPrefix strategy = new MixPrefix("PRODUCT-", 5, '0');</emphasis>
<emphasis role="bold">id = idGenerator.getNextStringId(strategy);</emphasis></programlisting>
				</para>
      		</listitem>
    	</itemizedlist>

	<section id="foundation_idgen_idgenstrategy_mixprefix">
	<title>How to define MixPrefix property</title>

		<para>
			TableIdGenerationService provides basic generation strategy
				named anyframe.core.idgen.impl.strategy.MixPrefix.
				MixPrefix is one type of id generation strategy
				and combines new id, prefix and fillChar when creating id.
				For example, when prefix is 'TEST-' and fillChar is '0',
				id returned through TableIdGenerationService is '12,
				and if cipers is '5', returned id value will be 'TEST-00012'.				
      		<programlisting language="xml"><![CDATA[<bean ]]><emphasis
      		role="bold">name="mixPrefix" class="anyframe.core.idgen.impl.strategy.MixPrefix"</emphasis><![CDATA[>
    <property name="prefix" value="TEST-"/>
    <property name="cipers" value="5"/>
    <property name="fillChar" value="*"/>
</bean>]]></programlisting>
		</para>
    </section>

    <section id="foundation_idgen_idgenstrategy_implement">
	<title>How to implement Id Generation Strategy </title>

		<para>
			To develop strategy, you must implement
				anyframe.core.idgen.IdGenerationStrategy.
				In addition, return id whose strategy is applied through makeId(String
				originalId) method.
				The following is an example of implementing makeId within MixPrefix.			
      		<programlisting language="java">public class MixPrefix <emphasis
            role="bold">implements IdGenerationStrategy</emphasis>{
    <emphasis role="bold">public String makeId(String originalId) {</emphasis>

        return prefix + StringUtil.fillString(originalId, fillChar, cipers);
    }
}</programlisting>
		</para>
    </section>
</chapter>
