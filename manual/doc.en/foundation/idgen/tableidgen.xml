<chapter id="foundation_idgen_tableid">
    <title>TableIdGenerationService</title>

	    <para>
	    	TableIdGenerator gets unique id by using a specific table managing id.
			This id-managing table requires two columns such as table_name(CHAR
			or VARCHAR type)
			and next_id(integer type. In addition, when applying
			 <link linkend="foundation_idgen_idgenstrategy">Generation Strategy </link>,
			TableIdGeneration Service returns the result value which applied strategy defined to
			new id.
			TableIdGenerationService has the following setting.
	        	</para>

		<informaltable>
	      <tgroup cols="4">
	        <colspec colnum="1" colname="col1" colwidth="2*"/>
	        <colspec colnum="2" colname="col2" colwidth="6*"/>
	        <colspec colnum="3" colname="col3" colwidth="1*"/>
	        <colspec colnum="4" colname="col4" colwidth="1*"/>
	        <thead>
	          <row>
	            <entry align="center">Property Name</entry>
	            <entry align="center">Description</entry>
	            <entry align="center">Required</entry>
	            <entry align="center">Default Value</entry>
	          </row>
	        </thead>
	        <tbody>
	          <row>
	            <entry>dataSource</entry>
	            <entry>This is needed when using TableIdGenerationService.
							Defines DataSourceService to link to DB.
						</entry>
	            <entry align="center">Y</entry>
	            <entry align="center">N/A</entry>
	          </row>
	          <row>
	            <entry>strategy</entry>
	            <entry>Defines ID Generation Strategy. Basically,
							this uses MixPrefix which returns id combining prefix, new id and
							fillChar.
	           </entry>
	            <entry align="center">N</entry>
	            <entry align="center">N/A</entry>
	          </row>
	        </tbody>
	      </tgroup>
	    </informaltable>
	    <para></para>
	
	    <informaltable>
	      <tgroup cols="6">
	        <colspec colnum="1" colname="col1" colwidth="2*"/>
	        <colspec colnum="2" colname="col2" colwidth="1*"/>
	        <colspec colnum="3" colname="col3" colwidth="4*"/>
	        <colspec colnum="4" colname="col4" colwidth="1*"/>
	        <colspec colnum="5" colname="col5" colwidth="1*"/>
	        <colspec colnum="6" colname="col6" colwidth="1*"/>
	        <thead>
	          <row>
	            <entry align="center">Tag Name</entry>
	            <entry align="center">Attribute Name</entry>
	            <entry align="center">Description</entry>
	            <entry align="center">Required</entry>
	            <entry align="center">Default Value</entry>
	            <entry align="center">Child Tag</entry>
	          </row>
	        </thead>
	        <tbody>
	          <row>
	            <entry>config:configuration</entry>
	            <entry>block-size</entry>
	            <entry>
	            	If access is made to DB every time id is issued, system performance will be
							reduced.
							Therefore, you can set the number of id to be issued at once in
							TableIdGenerationService.	           
	            </entry>
	            <entry align="center">N</entry>
	            <entry align="center">10</entry>
	            <entry />
	          </row>
	          <row>
	            <entry>config:configuration</entry>
	            <entry>table</entry>
	            <entry>Table name to save id issued to date. </entry>
	            <entry align="center">N</entry>
	            <entry align="center">ids</entry>
	            <entry />
	          </row>
	          <row>
	            <entry>config:configuration</entry>
	            <entry>key-table</entry>
	            <entry>
	            	Key name to save for which the id is issued.
							For example, if id is to be issued for 'Order' and 'Product',
							you can define key-table property value as 'order' and 'product'.							
	            </entry>
	            <entry align="center">N</entry>
	            <entry align="center">id</entry>
	            <entry />
	          </row>
	          <row>
	            <entry>config:configuration</entry>
	            <entry>big-decimals</entry>
	            <entry>This can be used when trying to use BigDecimal type id
							rather than long type id.
							</entry>
	            <entry align="center">N</entry>
	            <entry align="center">id</entry>
	            <entry />
	          </row>
	        </tbody>
	      </tgroup>
		</informaltable>

	<section id="foundation_idgen_tableid_samples">
	<title>Samples</title>

		<itemizedlist>
			<listitem>
				<para><emphasis role="bold">Configuration</emphasis></para>

				<para>
					The following is a part of context-idgen.xml which defines the
						property of TableIdGernerationService.
						TableIdGernerationService basically applies mixPrefix Strategy
						id management table named ids will be used to provide unique id to
						test table.
						Therefore, to execute TableIdGernerationService based on the following
						properties,
						information such as [TABLE_NAME:test,
						NEXT_ID:initial value] must be added in ids table.					
          			<programlisting language="xml"><![CDATA[<bean name="idGenerationService"
    class="anyframe.core.idgen.impl.TableIdGenerationService"
    destroy-method="destroy">
    <property name="dataSource" ref="dataSource" />
    <property name="strategy" ref="mixPrefixProduct" />
    <config:configuration block-size="1" table="ids" key-table="PRODUCT" />
</bean>]]></programlisting>
				</para>
        	</listitem>

        	<listitem>
          		<para><emphasis role="bold">TestCase</emphasis></para>

          		<para>
          			The following is a part of Main.java code which extracts unique id
						by using
						tableIdgenerationService based on the above-mentioned configuration.
					
          			<programlisting language="java">public void manageProduct() throws Exception {
    // 1. lookup categoryService
    ProductService service = (ProductService) context
                                .getBean("productService");

    // 2. create a new category
    Product product = new Product();
    product.setProdName("sample");
    service.create(product);

    // 3. get a category
    Product result = service.get(product.getProdNo());
    System.out.println("The generated product-no is a '"
                    + result.getProdNo() + "'.");
}</programlisting>
				</para>

        		<para>
        			The following is a part of ProductServiceImpl.java code which
						extracts unique code
						by using TableIdgenerationService called from Main.java.
					
          			<programlisting language="java">@Resource
IIdGenerationService idGenerationService;
   
/**
 * Product information creation using tableIdgeneration.
 
 */
public void create(Product product) throws Exception {
    // Get new ID and set prodNo.	
    product.setProdNo(<emphasis role="bold">idGenerationService.getNextStringId()</emphasis>);
    productDao.create(product);
}        </programlisting>
				</para>
        	</listitem>
      	</itemizedlist>
	</section>
</chapter>
