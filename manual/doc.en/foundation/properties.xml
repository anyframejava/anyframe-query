<chapter id="foundation_properties">
	<title>Properties Service</title>
	<para>
		다음은 Anyframe 에서 제공하는 Properties 서비스에 대한 구현체이다.
		(Foundation Plugin으로 생성된 샘플 어플리케이션에서는 PropertiesService 대신 SpEL을 활용하여 Property 정보를 처리하고 있다. 그러나 Property File에 대한 
		인코딩 처리 및 Dynamic Reload 기능 등이 필요할 경우 활용할 수 있다.)
	</para>

	<section id="foundation_properties_implementation">
		<title>PropertiesServiceImpl</title>
		<para>다음은 Properties 서비스를 사용하기 위해 필요한 설정 정보들이다.</para>
	    <informaltable>
			<tgroup cols="4">
				<colspec colname="col1" colnum="1" colwidth="2.5*" />
				<colspec colname="col2" colnum="2" colwidth="6*" />
				<colspec colname="col3" colnum="3" colwidth="1*" />
				<colspec colname="col4" colnum="4" colwidth="1*" />
		
				<thead>
					<row>
						<entry align="center">Property</entry>
						<entry align="center">Description</entry>
						<entry align="center">Required</entry>
						<entry align="center">Default Value</entry>
					</row>
				</thead>
		
				<tbody>
					<row>
							<entry>dynamicReload</entry>
							<entry>
								PropertiesService를 통해 관리되는 파일들에 대한 변경 여부를 감지하는 주기 (millisecond 단위)
								이 속성이 정의되어 있지 않은 경우 Dynamic Reload를 수행하지 않음
								(이 속성에 대한 자세한 내용은 본 장의 <link linkend="foundation_properties_dynamic">Dynamic Reloading</link>을 참고하도록 한다.)
							</entry>
							<entry>N</entry>
							<entry>-1</entry>
					</row>		
				</tbody>
			</tgroup>
		</informaltable>
		<informaltable>
			<tgroup cols="6">
				<colspec colnum="1" colname="col1" colwidth="2*" />
				<colspec colnum="2" colname="col2" colwidth="1*" />
				<colspec colnum="3" colname="col3" colwidth="4*" />
				<colspec colnum="4" colname="col4" colwidth="1*" />
				<colspec colnum="5" colname="col5" colwidth="1*" />
				<colspec colnum="6" colname="col6" colwidth="1*" />
				<thead>
					<row>
						<entry align="center">Tag Name</entry>
						<entry align="center">Attrubute Name</entry>
						<entry align="center">Description</entry>
						<entry align="center">Required</entry>
						<entry align="center">Default Value</entry>
						<entry align="center">Child Tag</entry>
					</row>
				</thead>
				<tbody>
					<row>
						<entry>config:configuration</entry>
						<entry></entry>
						<entry></entry>
						<entry></entry>
						<entry></entry>
						<entry>filename properties</entry>
					</row>
					<row>
						<entry>filename</entry>
						<entry></entry>
						<entry>
							key, value의 쌍이 외부 별도 파일에 존재하는 경우 해당 파일명을 경로와 함께 표시한다. 절대 / 상대 물리적인 파일 경로 지정 방법과 Classpath를 
							이용한 지정 방법 2가지가 있다.
						</entry>
						<entry align="center">N</entry>
						<entry align="center">N/A</entry>
						<entry></entry>
					</row>
					<row>
						<entry>filename</entry>
						<entry>encoding</entry>
						<entry>property file의 encoding 정보를 정의한다.</entry>
						<entry align="center">N</entry>
						<entry align="center">NULL</entry>
						<entry>element</entry>
					</row>
					<row>
						<entry>properties</entry>
						<entry></entry>
						<entry>Properties 서비스 속성 정의 파일 내에 직접 key, value의 쌍을 하위요소 element를 이용하여 지정한다.</entry>
						<entry align="center">N</entry>
						<entry align="center">N/A</entry>
						<entry></entry>
					</row>
					<row>
						<entry>element</entry>
						<entry>key</entry>
						<entry>찾을 value에 대한 key.</entry>
						<entry align="center">Y</entry>
						<entry></entry>
						<entry></entry>
					</row>
					<row>
						<entry>element</entry>
						<entry>value</entry>
						<entry>해당 key에 대한 value.</entry>
						<entry align="center">Y</entry>
						<entry></entry>
						<entry></entry>
					</row>
				</tbody>
			</tgroup>
		</informaltable>

		<section id="foundation_properties_implementation_samples">
			<title>Samples</title>
			<itemizedlist>
				<listitem>
					<para>
						<emphasis role="bold">Configuration </emphasis>
					</para>
					<para>
						다음은 Properties 서비스의 속성을 정의한 context-properties.xml 의 일부이다. 아래 PropertiesService는 클래스패스 상에 존재하는
						sample-resource.properties 파일에 정의된 property들과 개별 정의된 property들을 관리하게 된다.
					</para>
					<programlisting language="xml"><![CDATA[<bean name="propertiesService" class="anyframe.core.properties.impl.PropertiesServiceImpl"
    destroy-method="destroy">
    <config:configuration>
        <fileName encoding="UTF-8">classpath:/property/sample-resource.properties</fileName>
        <properties>
            <element key="PAGE_SIZE" value="3" />
            <element key="PAGE_UNIT" value="10" />
        </properties>
    </config:configuration>
</bean>]]></programlisting>
				</listitem>
				<listitem>
					<para>
						<emphasis role="bold">TestCase</emphasis>
					</para>
					<para>
						다음은 앞서 정의한 속성 설정을 기반으로 Properties 서비스를 사용하는 ProductDaoImpl.java 코드의 일부이다.
					</para>
					<programlisting language="java">@Resource IPropertiesService propertiesService;

public Page getPagingList(ProductSearchVO searchVO) throws Exception {
    // try to paging list based on properties (PAGE_SIZE, PAGE_UNIT)
    int pageIndex = searchVO.getPageIndex();
    int pageSize =
        <emphasis role="bold">this.getPropertiesService().getInt("PAGE_SIZE");</emphasis>
    int pageUnit =
        <emphasis role="bold">this.getPropertiesService().getInt("PAGE_UNIT");</emphasis>

    System.out.println("value of PAGE_SIZE property is a '" + pageSize + "'.");
    System.out.println("value of PAGE_UNIT property is a '" + pageUnit + "'.");

    Product product = new Product();
    String searchKeyword =
        StringUtil.null2str(searchVO.getSearchKeyword());
    product.setProdName("%"+searchKeyword+"%");
    String asYn = searchVO.getSearchAsYn();
    product.setAsYn(asYn);

    return
        this.findListWithPaging(ClassUtils.getShortName(getPersistentClass()),
        product, pageIndex, pageSize, pageUnit);
}</programlisting>
					<para>다음은 앞서 정의한 속성 설정을 기반으로 Properties 서비스를 사용하여 message 를 추출하는 Main.java 코드의 일부이다.</para>
					<programlisting language="java">public void getProperty() throws Exception {
    // 1. lookup propertiesService
    IPropertiesService service = (IPropertiesService) context
        .getBean("propertiesService");
    // 2. try to get a property
    System.out.println("value of message property is a '"
        + <emphasis role="bold">service.getString("message")</emphasis> + "'.");
}</programlisting>
				</listitem>
			</itemizedlist>
		</section>
	</section>

	<section id="foundation_properties_sample">
		<title>Sample Property File</title>
		<para>
			다음은 위 Properties 서비스 속성 정의 파일에 정의된 sample-resource.properties 파일의 내용이다.
		</para>
		<programlisting># This is the simplest property message = Hi! Anyframe</programlisting>
	</section>
	
	<section id="foundation_properties_dynamic">
		<title>Dynamic Reloading</title>
		<para>
			PropertiesService는 관리하는 Property 파일에 대한 Dynamic Reload 기능을 제공한다. (PropertiesService 4.2.0 이후) 
			Dynamic Reload 기능을 사용하게 되면 시스템 운영 중 관리 대상이 되는 Property 파일이 변경되었을 경우 이를 감지하여 내부적으로 Reload를 수행함으로써 서버를 재시작하지 
			않고서도 변경된 Property 정보를 읽을 수 있게 된다. 
		</para>
		<para>
			Dynamic Reload 기능을 적용하기 위해서는 'dynamicReload' 속성 정의가 추가되어야 한다.
		</para>
		<programlisting language="xml"><![CDATA[<bean name="propertiesService" 
    class="anyframe.core.properties.impl.PropertiesServiceImpl" destroy-method="destroy">
    <property]]> <emphasis role="bold">name="dynamicReload" value="1000"</emphasis><![CDATA[/>
    <config:configuration >
        <fileName>file:./src/**/refresh-resource.properties</fileName>
        <fileName>file:./src/**/dynamic-reload-resource.properties</fileName>
        <!-- ... -->
    </config:configuration>			
</bean>]]></programlisting>
		<important>
			<title>Dynamic Reload 기능 사용시 유의할 점</title>
			<para>
				Dynamic Reload 기능은 Properties Service이 XML 내에 정의된 개별 Property나 클래스패스 내에 존재하는 Property File이 아닌 파일시스템을 통해 로드한 
				Property File에만 적용됨에 유의하도록 한다.
				또한 Dynamic Reload 기능 수행시 이전에 로드되어 있던 Properties를 Clear하고 새로운 Properties를 반영하도록 구현되어 있으므로 PropertiesService Bean 
				속성 정의시 개별 Property 정의 및 클래스패스 내에 존재하는 Property File은 사용하지 말고 파일 시스템 기반의 Property File만을 활용하도록 한다.				
			</para>
		</important>
	</section>
	
	<section id="foundation_properties_resources">
		<title>Resources</title>
		<para>
			<itemizedlist>
				<listitem>
					<para>다운로드</para>
					<para>
						다음에서 테스트 DB를 포함하고 있는 hsqldb.zip과 sample 코드를 포함하고 있는 anyframe.sample.properties.zip 파일을 다운받은 후, 압축을 해제한다. 
						그리고 hsqldb 폴더 내의 start.cmd (or start.sh) 파일을 실행시켜 테스트 DB를 시작시켜 놓는다.
						<itemizedlist>
							<listitem>
								<para>Maven 기반 실행</para>
								<para>
									Command 창에서 압축 해제 폴더로 이동한 후, mvn compile exec:java -Dexec.mainClass=...이라는 명령어를 실행시켜 결과를 확인한다.
									각 Eclipse 프로젝트 내에 포함된 Main 클래스의 JavaDoc을 참고하도록 한다.
								</para>
							</listitem>
							<listitem>
								<para>Eclipse 기반 실행</para>
								<para>
									Eclipse에서 압축 해제 프로젝트를 import한 후, src/main/java 폴더의 anyframe/sample/properties
									하위의 Main.java를 선택하고 마우스 오른쪽 버튼 클릭하여 컨텍스트 메뉴에서 Run As > Java
									Application을 클릭한다. 그리고 실행 결과를 확인한다.
								</para>
							</listitem>
						</itemizedlist>
					</para>
					<table>
						<title>Download List</title>
						<tgroup cols="2">
							<colspec colnum="1" colname="col1" colwidth="4*" />
							<colspec colnum="2" colname="col2" colwidth="6*" />
							<thead>
								<row>
									<entry align="center">Name</entry>
									<entry align="center">Download</entry>
								</row>
							</thead>
							<tbody>
								<row>
									<entry align="center">hsqldb.zip</entry>
									<entry align="center">
										<ulink
											url="http://dev.anyframejava.org/docs/anyframe/plugin/foundation/4.6.1/reference/sample/hsqldb.zip">Download</ulink>
									</entry>
								</row>
								<row>
									<entry align="center">anyframe.sample.properties.zip</entry>
									<entry align="center">
										<ulink
											url="http://dev.anyframejava.org/docs/anyframe/plugin/foundation/4.6.1/reference/sample/anyframe.sample.properties.zip">Download</ulink>
									</entry>
								</row>
							</tbody>
						</tgroup>
					</table>
				</listitem>
			</itemizedlist>
		</para>
	</section>
</chapter>