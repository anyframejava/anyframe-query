<chapter id="foundation_springmvc_internationalization">
	<title>Internationalization</title>

		<para>
			Spring MVC에서는 Presentation Layer에서 사용자의 Local에 따른 국제화를 위해
   			여러가지 Locale Resolver를 한다. Request가 들어오면 DispatcherServlet은
   			Locale resolver에 의해 사용자의 Local을 알아내게 되며 RequestContext.getLocale()
   			메소드를 사용해서 Locale을 확인할 수 있다.
  		</para>

	<section id="foundation_springmvc_internationalization_multilanguage">
    <title>다국어 지원 기능</title>

    	<para>
    		Spring MVC는 다국어를 지원하기 위하여 Locale Resolver를 가지고 있으며 특정 Locale Resolver를
    		정의하지 않을 경우 디폴트로 AcceptHeaderLocaleResolver를 이용한다. 또한 사용자들이 원하는 언어를 직접
    		선택할 수 있도록 구현해야 한다면 CookieLocaleResolver 또는 SessionLocaleResolver를 이용하여
    		구현하도록 한다. 웹 어플리케이션의 화면에 출력해줄 메세지 리소스를 추출하기 위해 Spring MVC에서는
    		MessageSource를 제공하며 이러한 MessageSource에서 추출한 메시지를 화면에
    		출력해 줄 수있는 tag 라이브러리를 제공한다. 사용 방법은 아래와 같다.
    	</para>
    	<itemizedlist>
      		<listitem>
        	<para>Step 1 : properties 파일 작성</para>
	        <para>
	        	각각 언어에 따른 properties파일을 생성하고 출력할 메시지를 작성한다. PropertiesEditor
        		이클립스 플러그인을 사용하면 쉽게 작성할 수 있다. 다음은 message-user_ko.properties ,
        		message-user_en.properties 파일의 일부이다.
        	</para>

			<itemizedlist>
				<listitem>
	            <para>
	            	한글용 (message-user_ko.properties)
	            	<programlisting language="xml">title.user.form = 당신의 정보를 입력하세요.</programlisting>
	            </para>
	          	</listitem>
	
	          	<listitem>
	            <para>
	            	영어용, default용 (message-user.properties, message-user_en.properties)
	            	<programlisting language="xml">title.user.form = Input your information</programlisting>
	            </para>
	          	</listitem>
			</itemizedlist>
			</listitem>

      		<listitem>
        		<para>Step 2 : MessageSource 정의</para>

        		<para>
        			다음은 messageSource가 정의되어 있는 context-user.xml 파일의 일부이다.
        			<programlisting language="xml"><![CDATA[<bean id="messageSource"
   class="anyframe.common.context.support.EncodingResourceBundleMessageSource">
   <property name="]]><emphasis role="bold">basenames</emphasis>"<![CDATA[>
      <list>
        <!-- properties파일의 이름을 등록한다.
                 등록되 있지 않을 시에 디폴트로 message.properties파일을 찾는다.-->
         <]]><emphasis role="bold">value</emphasis><![CDATA[>]]><emphasis 
         role="bold">message-user</emphasis><![CDATA[</]]><emphasis
              role="bold">value</emphasis><![CDATA[>
      </list>
   </property>
</bean>]]></programlisting>
				</para>
			</listitem>

			<listitem>
				<para>Step 3: JSP 파일 작성</para>

				<para>
					JSP파일에서 등록한 message를 출력하기 위해서 Spring에서 제공하는 태그라이브러리를 등록한
					userForm.jsp 파일의 일부이다.
					<programlisting
					language="xml"><![CDATA[<%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%>]]></programlisting>
				</para>

	        	<para>
		        	<![CDATA[다음과 같이 <spring:message> 태그를 사용하여 메시지를 출력할 수 있다.]]>
					<programlisting
					language="xml"><![CDATA[<spring:message code="title.user.form"></spring:message>]]></programlisting>
				</para>

       	 		<para>이러한 spring:message 태그의 속성은 다음과 같다.</para>

		        <informaltable>
		          <tgroup cols="2">
		                <colspec colnum="1" colname="col1" colwidth="2*"/>
		                <colspec colnum="2" colname="col2" colwidth="8*"/>
		            <thead>
		              <row>
		                <entry align="center">속성</entry>
		                <entry align="center">설명</entry>
		              </row>
		            </thead>
		            <tbody>
		              <row>
		                <entry>arguments</entry>
		                <entry>부가적인 인자를 넘겨줌. 콤마로 구분된 문자열, 객체 배열, 객체 하나를 넘김.</entry>
		              </row>
		              <row>
		                <entry>argumentSeparator</entry>
		                <entry>넘겨줄 인자들의 구분자 설정. 기본값은 콤마.</entry>
		              </row>
		              <row>
		                <entry>code</entry>
		                <entry>룩업할 메시지의 키 지정. 지정하지 않으면 text에 입력한 값 출력.</entry>
		              </row>
		              <row>
		                <entry>htmlEscape</entry>
		                <entry>html 기본 escapse 속성 오버라이딩. 기본값 false.</entry>
		              </row>
		              <row>
		                <entry>javaScriptEscape</entry>
		                <entry>기본값 false</entry>
		              </row>
		              <row>
		                <entry>message</entry>
		                <entry>
		                	MessageSourceResolvable 인자로 Spring MVC validation을 거친  errors의 메시지를 쉽게 보여줄 때 사용
		                </entry>
		              </row>
		              <row>
		                <entry>scope</entry>
		                <entry>결과 값을 변수에 지정할 때 변수의 scope 지정 (page, request, session, application)</entry>
		              </row>
		              <row>
		                <entry>text</entry>
		                <entry>해당 code로 가져온 값이 없을 때 기본으로 보여줄 문자열. 빈 값이면 null 출력.</entry>
		              </row>
		
		              <row>
		                <entry>var</entry>
		
		                <entry>결과 값을 이 속성에 해당한 문자열에 바인딩 할 때 사용. 빈 값이면 그냥 JSP에 뿌려줌.</entry>
		              </row>
		            </tbody>
		          </tgroup>
		        </informaltable>
			</listitem>
		</itemizedlist>

		<section id="foundation_springmvc_internationalization_multilanguage_localeresolver">
		<title>Locale Resolver를 이용한 Locale 변경</title>

			<para>
				Locale Resolver를 사용하여 locale을 바꾸고 싶을 때는 setter Injection을 통해 정의한 Locale Resolver를
				injection 한 후 setLocale()메소드를 통해 locale을 변경해 줄 수 있다. 또한 resolveLocale(request)메소드를
				사용하여 현재 request에 셋팅되어 있는 Locale을 알아낼 수 있다.
				<programlisting language="java">public class UserController extends MultiActionController {
    LocaleResolver localeResolver= null;
    
    //setter injection
    public void setLocaleResolver(LocaleResolver localeResolver){
        this.localeResolver = localeResolver;
    }

    protected ModelAndView changeLocale(HttpServletRequest request
                            , HttpServletResponse response) throws Exception {
        //request parameter "locale"에 사용자가 설정한 locale을 가지고 온다.<![CDATA[(ex> en, ko)]]>
        Locale locale = new Locale(request.getParameter("locale"));
        //localeResolver에 locale 셋팅
       <emphasis role="bold"> localeResolver.setLocale(request, response, locale);</emphasis>
        //셋팅된 locale 확인
        System.out.println("current locale from locale resolver ====== " + 
            <emphasis role="bold">localeResolver.resolveLocale(request)</emphasis>);
        return new ModelAndView("/jsp/result.jsp");
    }

...생략...</programlisting>
			</para>
		</section>

		<section id="foundation_springmvc_internationalization_multilanguage_localechangeinterceptor">
		<title>LocaleChangeInterceptor를 이용한 Locale 변경</title>

			<para>
				HandlerMapping에 interceptor를 등록하여 특정 locale의 요청을 가로채서 특정 파라미터에 넘어 온 값으로
      			locale을 지정할 수 있다. 속성 정의 파일 내의 LocaleChaneInterceptor 정의 예는 다음과 같다.
      			<programlisting language="xml"><![CDATA[<bean id="]]><emphasis role="bold">localeResolver</emphasis>"
      class="org.springframework.web.servlet.i18n.<emphasis role="bold">CookieLocaleResolver</emphasis><![CDATA["/>
      
<bean id="]]><emphasis role="bold">localeChangeInterceptor</emphasis>"
      class="org.springframework.web.servlet.i18n.<emphasis role="bold">LocaleChangeInterceptor</emphasis><![CDATA[">
    <property name="paramName" value="locale"/>
</bean>

<bean id="urlMapping"
      class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="interceptors">
        <list>
            <ref bean="]]><emphasis role="bold">localeChangeInterceptor</emphasis><![CDATA["/>
        </list>
    </property>
    <property name="mappings">
        <value>/list.do=getUserListController</value>
    </property>
</bean>]]></programlisting>
			</para>

      		<para>여기서는 모든 /list.do 요청을 가로채서 "locale"이라는 request의 파라미터로 locale을 알아낼 수 있다.</para>
		</section>
	</section>

	<section id="foundation_springmvc_internationalization_localeresolver">
    <title>Locale Resolver</title>

	<para>
		위의 다국어 지원 예에서 처럼 Spring MVC에서는 Locale Resolver를 사용하여 Locale을 얻어올 수
    	있으며 이러한 Locale Resolver에는 아래와 같은 것들이 있다.
    </para>

	<section id="foundation_springmvc_internationalization_localeresolver_acceptheader">
	<title>AcceptHeaderLocaleResolver</title>

		<para>
			사용자의 브라우져에서 보내진 request의 헤더에 accept-language부분에서 Locale을 읽어들인다.
      		사용자의 OS locale을 나타낸다.
      		<programlisting language="xml"><![CDATA[<bean id="localeResolver"
            class="org.springframework.web.servlet.i18n.]]><emphasis
        	role="bold">AcceptHeaderLocaleResolver</emphasis><![CDATA[" />]]></programlisting>
        </para>

      	<para>AcceptHeaderLocaleResolver는 setLocale() method를 이용한 locale 변경이 불가능하다.</para>
    </section>

    <section id="foundation_springmvc_internationalization_localeresolver_cookie">
	<title>CookieLocaleResolver</title>

		<para>사용자의 쿠키에 설정된 Locale을 읽어 들인다. 다음과 같은 속성을 설정할 수 있다.</para>

		<informaltable>
	        <tgroup cols="3">
	                <colspec colnum="1" colname="col1" colwidth="2*"/>
	                <colspec colnum="2" colname="col2" colwidth="2*"/>
	                <colspec colnum="3" colname="col3" colwidth="6*"/>
	          <thead>
	            <row>
	              <entry align="center">속성</entry>
	              <entry align="center">기본값</entry>
	              <entry align="center">설명</entry>
	            </row>
	          </thead>
	          <tbody>
	            <row>
	              <entry>cookieName</entry>
	              <entry>classname + LOCALE</entry>
	              <entry>쿠키 이름</entry>
	            </row>
	            <row>
	              <entry>cookieMaxAge</entry>
	              <entry>Integer.MAX_INT</entry>
	              <entry>쿠키 살려둘 시간. -1로 해두면 브라우저를 닫을 때 없어짐</entry>
	            </row>
	            <row>
	              <entry>cookiePath</entry>
	              <entry>/</entry>
	              <entry>Path를 지정해 주면 해당 하는 path와 그 하위 path에서만 참조</entry>
	            </row>
	          </tbody>
	        </tgroup>
		</informaltable>

		<programlisting language="xml"><![CDATA[<bean id="localeResolver"
    class="org.springframework.web.servlet.i18n.]]><emphasis role="bold">CookieLocaleResolver</emphasis><![CDATA[" >
    <property name="cookieName" value="clientlanguage"/>    
    <property name="cookieMaxAge" value="100000"/>
    <property name="cookiePath" value="web/cookie"/>
</bean>]]></programlisting>
    </section>

	<section id="foundation_springmvc_internationalization_localeresolver_session">
	<title>SessionLocaleResolver</title>

		<para>
			requst가 가지고 있는 session으로 부터 locale 정보를 가져온다.
			<programlisting language="xml"><![CDATA[<bean id="localeResolver"
    class="org.springframework.web.servlet.i18n.]]><emphasis role="bold">SessionLocaleResolver</emphasis><![CDATA[" />
]]></programlisting>
		</para>
    </section>

    	<section id="foundation_springmvc_internationalization_localeresolver_fixed">
		<title>FixedLocaleResolver</title>

			<para>
				사용자가 특정한 Locale을 지정할 수 있으며 setLocale()메소드를 지원하지 않는다.
				<programlisting language="xml"><![CDATA[<bean id="fixedLocaleResolver"
    class="org.springframework.web.servlet.i18n.]]><emphasis role="bold">FixedLocaleResolver</emphasis><![CDATA[">
    <]]><emphasis role="bold">property name="defaultLocale" value="en</emphasis>"<emphasis
            role="bold">/</emphasis><![CDATA[>
</bean>]]></programlisting>
			</para>
		</section>
	</section>
</chapter>
